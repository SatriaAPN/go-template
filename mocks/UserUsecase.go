// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dtousecase "go-template/dto/general/usecase"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, cu
func (_m *UserUsecase) CreateUser(ctx context.Context, cu dtousecase.CreateUserRequest) (dtousecase.CreateUserResponse, error) {
	ret := _m.Called(ctx, cu)

	var r0 dtousecase.CreateUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, dtousecase.CreateUserRequest) dtousecase.CreateUserResponse); ok {
		r0 = rf(ctx, cu)
	} else {
		r0 = ret.Get(0).(dtousecase.CreateUserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtousecase.CreateUserRequest) error); ok {
		r1 = rf(ctx, cu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgetPassword provides a mock function with given fields: ctx, r
func (_m *UserUsecase) ForgetPassword(ctx context.Context, r dtousecase.ForgetPasswordRequest) (dtousecase.ForgetPasswordResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 dtousecase.ForgetPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, dtousecase.ForgetPasswordRequest) dtousecase.ForgetPasswordResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(dtousecase.ForgetPasswordResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtousecase.ForgetPasswordRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: ctx, r
func (_m *UserUsecase) GetUserProfile(ctx context.Context, r dtousecase.GetUserProfileRequest) (dtousecase.ProfileUserResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 dtousecase.ProfileUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, dtousecase.GetUserProfileRequest) dtousecase.ProfileUserResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(dtousecase.ProfileUserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtousecase.GetUserProfileRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, cu
func (_m *UserUsecase) LoginUser(ctx context.Context, cu dtousecase.LoginUserRequest) (dtousecase.LoginUserResponse, error) {
	ret := _m.Called(ctx, cu)

	var r0 dtousecase.LoginUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, dtousecase.LoginUserRequest) dtousecase.LoginUserResponse); ok {
		r0 = rf(ctx, cu)
	} else {
		r0 = ret.Get(0).(dtousecase.LoginUserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dtousecase.LoginUserRequest) error); ok {
		r1 = rf(ctx, cu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, r
func (_m *UserUsecase) ResetPassword(ctx context.Context, r dtousecase.ResetPasswordRequest) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dtousecase.ResetPasswordRequest) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

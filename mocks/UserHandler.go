// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pb "go-template/pb"
)

// UserHandler is an autogenerated mock type for the UserHandler type
type UserHandler struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, req
func (_m *UserHandler) Login(ctx context.Context, req *pb.LoginRequest) (*pb.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *pb.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginRequest) *pb.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAuthServer provides a mock function with given fields:
func (_m *UserHandler) mustEmbedUnimplementedAuthServer() {
	_m.Called()
}

type mockConstructorTestingTNewUserHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserHandler creates a new instance of UserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserHandler(t mockConstructorTestingTNewUserHandler) *UserHandler {
	mock := &UserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

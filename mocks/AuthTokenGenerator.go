// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "go-template/dto"

	mock "github.com/stretchr/testify/mock"
)

// AuthTokenGenerator is an autogenerated mock type for the AuthTokenGenerator type
type AuthTokenGenerator struct {
	mock.Mock
}

// Decode provides a mock function with given fields: token
func (_m *AuthTokenGenerator) Decode(token string) (dto.AuthData, error) {
	ret := _m.Called(token)

	var r0 dto.AuthData
	if rf, ok := ret.Get(0).(func(string) dto.AuthData); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(dto.AuthData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encode provides a mock function with given fields: data
func (_m *AuthTokenGenerator) Encode(data dto.AuthData) (string, error) {
	ret := _m.Called(data)

	var r0 string
	if rf, ok := ret.Get(0).(func(dto.AuthData) string); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.AuthData) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthTokenGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthTokenGenerator creates a new instance of AuthTokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthTokenGenerator(t mockConstructorTestingTNewAuthTokenGenerator) *AuthTokenGenerator {
	mock := &AuthTokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
